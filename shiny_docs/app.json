[{"name":"app.r","content":"library(shiny)\r\nlibrary(plotly)\r\nlibrary(ggplot2)\r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\nlibrary(patchwork)\r\nlibrary(htmlwidgets)\r\nlibrary(shinyWidgets)\r\nlibrary(scales)\r\n\r\nload(\"C:/Users/acali/OneDrive - Danmarks Tekniske Universitet/nature_mobility/R_workspaces/workspace_DF_ALL_FINAL_MODELS.RData\")\r\nload(\"C:/Users/acali/OneDrive - Danmarks Tekniske Universitet/nature_mobility/R_workspaces/workspace_nat_use_avail_dfs.RData\")\r\n\r\nurban_labels <- c(\"30\" = \"Urban Centre\", \"23\" = \"Dense Urban Cluster\", \"22\" = \"Semi-Dense Urban Cluster\", \"21\" = \"Suburban\", \"13\" = \"Rural Cluster\", \"12\" = \"Low Density Rural\", \"11\" = \"Very Low Density Rural\")\r\nurban_order <- c(\"Suburban\", \"Very Low Density Rural\", \"Semi-Dense Urban Cluster\", \"Low Density Rural\", \"Dense Urban Cluster\", \"Rural Cluster\", \"Urban Centre\")\r\n\r\nHS_no_built_df$gender <- factor(HS_no_built_df$gender, levels = c(\"Male\", \"Female\"))\r\nHS_no_built_df$urban_label <- factor(HS_no_built_df$urban_label, levels = urban_order)\r\nHS_no_built_df$urban_group <- factor(HS_no_built_df$urban_group)\r\n\r\nplot_m10_facets <- function(df, response_type) {\r\n  df$urban_code <- as.integer(as.character(df$facet))\r\n  df$urban_label <- factor(urban_labels[as.character(df$urban_code)], levels = urban_order)\r\n  ylabel <- if (response_type == \"HD\") \"Habitat diversity index\" else \"Habitat selection index\"\r\n  ggplot(df, aes(x = x, y = predicted, fill = group)) +\r\n    geom_col(position = position_dodge(0.95)) +\r\n    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1, position = position_dodge(0.95)) +\r\n    facet_wrap(~urban_label, ncol = 2) + \r\n    labs(x = \"Age group\", y = ylabel, fill = \"Sex\") +\r\n    scale_fill_manual(values = c(\"Female\" = \"#fbb4ae\", \"Male\" = \"#89bbe5\")) +\r\n    scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\r\n    #guides(fill = guide_legend(nrow = 1, theme = theme(legend.title = element_text(hjust = 0.5), legend.position.inside = c(0.7, 0.01)))) +\r\n    theme_classic(base_size = 12) +\r\n    theme(strip.background = element_blank(), panel.spacing.y = unit(2, \"lines\"), axis.title.y = element_text(margin = margin(b = 30, unit = 'mm'), size = 12), legend.title = element_text(size = 10), legend.text = element_text(size = 8), axis.text.y = element_text(margin = margin(l = 10)))\r\n}\r\n\r\nplot_m5_bar <- function(df, response_type) {\r\n  ylabel <- if (response_type == \"HD\") \"Habitat diversity index\" else \"Habitat selection index\"\r\n  ggplot(df, aes(x = x, y = predicted, fill = Group)) +\r\n    geom_col(position = position_dodge(0.95)) +\r\n    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(0.95)) +\r\n    scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\r\n    labs(x = \"Age group\", y = ylabel, fill = \"Urbanization + Sex\") +\r\n    scale_fill_manual(values = c(\"Urban.Male\" = \"#f5964e\", \"Urban.Female\" = \"#f5b07b\", \"Rural.Male\" = \"#80c280\", \"Rural.Female\" = \"#bfe3bf\")) +\r\n    #guides(fill = guide_legend(nrow = 2, theme = theme(legend.title = element_text(hjust = 0.5)))) +\r\n    theme_classic(base_size = 12) +\r\n    theme(axis.title.y = element_text(margin = margin(b = 30, unit = 'mm'), size = 11), axis.title.x = element_text(margin = margin(t = 5), size = 11), legend.title = element_text(hjust = 0.5, size = 10), legend.text = element_text(size = 8), axis.text.y = element_text(margin = margin(l = 10)))\r\n}\r\n\r\nplot_zero_bar <- function(df, response_type) {\r\n  ylabel <- if (response_type == \"HD\") \"Probability of H = 0\" else \"Probability of HS = 0\"\r\n  ggplot(df, aes(x = x, y = predicted)) +\r\n    geom_col(position = position_dodge(0.9), fill = c(\"#fbb4ae\", \"#89bbe5\")) +\r\n    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.05, position = position_dodge(0.9)) +\r\n    labs(x = \"Sex\", y = ylabel) +\r\n    scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\r\n    theme_classic(base_size = 12)+\r\n    theme(axis.title.y = element_text(margin = margin(b = 30, unit = 'mm'), size = 11), axis.title.x = element_text(margin = margin(t = 5), size = 11), axis.text.y = element_text(margin = margin(l = 10)))\r\n}\r\n\r\nui <- navbarPage(\"Nature Mobility Explorer\",\r\n\r\n  # Tab 1: Model Predictions\r\n  tabPanel(\"Model Predictions\",\r\n    sidebarLayout(\r\n      sidebarPanel(\r\n        width = 2,\r\n        h4(\"Main Plot Controls\"),\r\n        selectInput(\"response\", \"Response Type\", choices = c(\"Habitat Diversity\" = \"HD\", \"Habitat Selection\" = \"HS\"), selected = \"HS\"),\r\n        selectInput(\"buffer\", \"Buffer\",\r\n                    choices = c(\"5km\" = \"5km\", \"10km\" = \"10km\", \"Outside 5km\" = \"5km_out\", \"Outside 10km\" = \"10km_out\"), selected = \"5km\"),\r\n        selectInput(\"model\", \"Model Version\", choices = c(\"m10\", \"m5\"), selected = \"m5\"),\r\n        checkboxInput(\"combine\", \"Show Fixed + Zero Panels Together\", value = TRUE),\r\n        downloadButton(\"downloadPlot\", \"Download Fixed Plot\"),\r\n        downloadButton(\"downloadZeroPlot\", \"Download Zero Plot\"),\r\n        tags$hr(),\r\n        checkboxInput(\"enable_compare\", \"Enable Comparison\", value = FALSE),\r\n        conditionalPanel(\r\n          condition = \"input.enable_compare == true\",\r\n          h4(\"Compare With Another Plot\"),\r\n          selectInput(\"response_cmp\", \"Response Type (Comparison)\",\r\n                      choices = c(\"Habitat Diversity\" = \"HD\", \"Habitat Selection\" = \"HS\"), selected = \"HS\"),\r\n          selectInput(\"buffer_cmp\", \"Buffer (Comparison)\",\r\n                      choices = c(\"5km\" = \"5km\", \"10km\" = \"10km\", \"Outside 5km\" = \"5km_out\", \"Outside 10km\" = \"10km_out\"),\r\n                      selected = \"10km\"),\r\n          selectInput(\"model_cmp\", \"Model Version (Comparison)\", choices = c(\"m10\", \"m5\"), selected = \"m5\"),\r\n          checkboxInput(\"cmp_fixed\", \"Compare Fixed Effects\", value = TRUE),\r\n          checkboxInput(\"cmp_zero\", \"Compare Zero Effects\", value = TRUE)\r\n        )\r\n      ),\r\n      mainPanel(uiOutput(\"dynamicPlots\"))\r\n    )\r\n  ),\r\n\r\n  # Tab 2: Data Summary Dashboard\r\n  tabPanel(\"Data Summary Dashboard\",\r\n    sidebarLayout(\r\n      sidebarPanel(\r\n        width = 2,\r\n        h4(\"Filter Data\"),\r\n        pickerInput(\"summary_country\", \"Country\", choices = NULL, multiple = TRUE, options = list(`actions-box` = TRUE)),\r\n        pickerInput(\"summary_age\", \"Age Group\", choices = NULL, multiple = TRUE, options = list(`actions-box` = TRUE)),\r\n        pickerInput(\"summary_gender\", \"Sex\", choices = NULL, multiple = TRUE, options = list(`actions-box` = TRUE)),\r\n        pickerInput(\"summary_urban_group\", \"Urban Group\", choices = NULL, multiple = TRUE, options = list(`actions-box` = TRUE)),\r\n        tags$hr(),\r\n        selectInput(\"summary_buffer\", \"Buffer Scope\", choices = c(\"5km\" = \"5km\", \"10km\" = \"10km\", \"Outside 5km\" = \"5km_out\", \"Outside 10km\" = \"10km_out\"))\r\n\r\n      ),\r\n      mainPanel(\r\n        tabsetPanel(\r\n          tabPanel(\"Univariate\",\r\n            downloadButton(\"download_hist_hs\", \"Download HS Histogram\"),\r\n            plotlyOutput(\"hist_hs\"),\r\n            downloadButton(\"download_hist_div\", \"Download Diversity Histogram\"),\r\n            plotlyOutput(\"hist_div\")\r\n          ),\r\n\r\n          tabPanel(\"Faceted Views\",\r\n            plotlyOutput(\"facet_hs_by_age_gender\"),\r\n            plotlyOutput(\"facet_div_by_region\")\r\n          )\r\n        )\r\n      )\r\n    )\r\n  ),\r\n\r\n  # Tab 3: Grouped Nature Use\r\n  tabPanel(\"Grouped Nature Use\",\r\n    sidebarLayout(\r\n      sidebarPanel(\r\n        width = 2,\r\n        selectInput(\"range_select\", \"Select Home Range\",\r\n                    choices = c(\"5km\" = \"5km\", \"10km\" = \"10km\")),\r\n        pickerInput(\"grouped_gender\", \"Gender\", choices = NULL, multiple = TRUE),\r\n        pickerInput(\"grouped_age\", \"Age Group\", choices = NULL, multiple = TRUE),\r\n        pickerInput(\"grouped_urban_group\", \"Urbanization\", choices = NULL, multiple = TRUE),\r\n        checkboxGroupInput(\"facet_vars\", \"Facet by:\",\r\n                           choices = c(\"Sex\" = \"gender\", \"Age Group\" = \"age_group\", \"Urbanization\" = \"urban_group\"),\r\n                           selected = c(\"gender\", \"age_group\"))\r\n      ),\r\n      mainPanel(\r\n        plotlyOutput(\"grouped_bar_plot\", height = \"600px\")\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n\r\n  build_name <- function(response, buffer, model, suffix) {\r\n    buffer <- switch(buffer,\r\n      \"5km_out\" = \"5km_out\",\r\n      \"10km_out\" = \"10km_out\",\r\n      buffer\r\n    )\r\n    paste0(response, \"_\", buffer, \"_\", model, \"_pred_\", suffix)\r\n  }\r\n\r\n  fixed_plot <- reactive({\r\n    name <- build_name(input$response, input$buffer, input$model, \"fixed\")\r\n    if (!exists(name, inherits = TRUE)) return(NULL)\r\n    df <- get(name, inherits = TRUE)\r\n    if (input$model == \"m10\") plot_m10_facets(df, input$response) else plot_m5_bar(df, input$response)\r\n  })\r\n\r\n  zero_plot <- reactive({\r\n    name <- build_name(input$response, input$buffer, input$model, \"zero\")\r\n    if (!exists(name, inherits = TRUE)) return(NULL)\r\n    df <- get(name, inherits = TRUE)\r\n    plot_zero_bar(df, input$response)\r\n  })\r\n\r\n  compare_plot <- reactive({\r\n    req(input$enable_compare && input$cmp_fixed)\r\n    name <- build_name(input$response_cmp, input$buffer_cmp, input$model_cmp, \"fixed\")\r\n    if (!exists(name, inherits = TRUE)) return(NULL)\r\n    df <- get(name, inherits = TRUE)\r\n    if (input$model_cmp == \"m10\") plot_m10_facets(df, input$response_cmp) else plot_m5_bar(df, input$response_cmp)\r\n  })\r\n\r\n  compare_zero_plot <- reactive({\r\n    req(input$enable_compare && input$cmp_zero)\r\n    name <- build_name(input$response_cmp, input$buffer_cmp, input$model_cmp, \"zero\")\r\n    if (!exists(name, inherits = TRUE)) return(NULL)\r\n    df <- get(name, inherits = TRUE)\r\n    plot_zero_bar(df, input$response_cmp)\r\n  })\r\n\r\n  raw_fixed_plot <- reactive({\r\n    name <- build_name(input$response, input$buffer, input$model, \"fixed\")\r\n    if (!exists(name, inherits = TRUE)) return(NULL)\r\n    df <- get(name, inherits = TRUE)\r\n    if (input$model == \"m10\") plot_m10_facets(df, input$response) else plot_m5_bar(df, input$response)\r\n  })\r\n\r\n  raw_zero_plot <- reactive({\r\n    name <- build_name(input$response, input$buffer, input$model, \"zero\")\r\n    if (!exists(name, inherits = TRUE)) return(NULL)\r\n    df <- get(name, inherits = TRUE)\r\n    plot_zero_bar(df, input$response)\r\n  })\r\n\r\n\r\n\r\n\r\n  # Titles\r\n  mainModel <- reactive({ if (input$model == \"m10\") {\"~ age group + sex + urban level + (1 | home country), zi = ~ sex + (1 | home country)\"} else {\"~ age group + sex + urban group + (1 | home country), zi = ~ sex + (1 | home country)\"}})\r\n  cmpModel <- reactive({ if (input$model_cmp == \"m10\") {\"~ age group + sex + urban level + (1 | home country), zi = ~ sex + (1 | home country)\"} else {\"~ age group + sex + urban group + (1 | home country), zi = ~ sex + (1 | home country)\"}})\r\n\r\n  mainResponseTitle <- reactive({ if (input$response == \"HD\") \"Habitat Diversity\" else \"Habitat Selection\"})\r\n  cmpResponseTitle <- reactive({ if (input$response_cmp == \"HD\") \"Habitat Diversity\" else \"Habitat Selection\"})\r\n  \r\n  mainBufferTitle <- reactive({ if (input$buffer == \"5km_out\") \"Outside 5km\" else if (input$buffer == \"10km_out\") \"Outside 10km\" else input$buffer })\r\n  cmpBufferTitle <- reactive({ if (input$buffer_cmp == \"5km_out\") \"Outside 5km\" else if (input$buffer_cmp == \"10km_out\") \"Outside 10km\" else input$buffer_cmp })\r\n\r\n  output$mainModelTitle <- renderText({paste(\"\", input$response, mainModel()) })\r\n  output$cmpModelTitle <- renderText({paste(\"\", input$response_cmp, cmpModel()) })\r\n  output$mainTitle <- renderText({ paste(\"Predicted \", mainResponseTitle(), \" \", \"(\", mainBufferTitle(), \")\", sep = \"\") })\r\n  output$mainTitleZero <- renderText({ paste(\" \") })\r\n  output$cmpTitle <- renderText({ paste(\"Predicted \", cmpResponseTitle(), \" \", \"(\", cmpBufferTitle(), \")\", sep = \"\") })\r\n  output$cmpTitleZero <- renderText({ paste(\" \") })\r\n\r\n  # Dynamic layout\r\n  output$dynamicPlots <- renderUI({\r\n    if (input$combine) {\r\n      tagList(\r\n        fluidRow(\r\n          column(width = 12,\r\n                 div(\r\n                  h4(textOutput(\"mainTitle\"), style = \"font-size: 18px;\"),\r\n                  h6(textOutput(\"mainModelTitle\"), style = \"font-style: italic; color: #666; font-size: 15px;\"), \r\n                  style = \"text-align: center; margin-bottom: 20px;\"\r\n                )\r\n            )\r\n        ),\r\n        fluidRow(\r\n          column(width = 8,\r\n               plotlyOutput(\"fixedPlot\", height = \"400px\")),\r\n          column(width = 4,\r\n               div(style = \"width: 95%; margin-top: 95px; margin-left: 20px;\", plotlyOutput(\"zeroPlot\", height = \"300px\")))\r\n      ))\r\n    } else if (!input$enable_compare) {\r\n      fluidRow(\r\n        column(width = 12,\r\n               div(\r\n                h5(textOutput(\"mainTitle\"), style = \"font-size: 18px;\"),\r\n                h6(textOutput(\"mainModelTitle\"), style = \"font-style: italic; color: #666; font-size: 15px;\"),\r\n                style = \"text-align: center;\"),\r\n               plotlyOutput(\"modelPlot\", height = \"400px\")\r\n              )\r\n          )\r\n    } else {\r\n      fluidRow(\r\n        column(width = 6,\r\n               if (input$cmp_fixed) {\r\n                 tagList(\r\n                   div(h5(textOutput(\"mainTitle\"), style = \"font-size: 15px;\"), \r\n                       h6(textOutput(\"mainModelTitle\"), style = \"font-style: italic; color: #666; font-size: 13px;\"),\r\n                       style = \"text-align: center;\"),\r\n                   plotlyOutput(\"modelPlot\", height = \"400px\")\r\n                 )\r\n               },\r\n               if (input$cmp_zero) {\r\n                 tagList(\r\n                   div(h5(textOutput(\"mainTitleZero\")), style = \"text-align: center; margin-top: 50px; font-size: 20px;\"),\r\n                   div(style = \"width: 60%;\", plotlyOutput(\"zeroPlotAlt\", height = \"300px\"))\r\n                 )\r\n               }\r\n        ),\r\n        column(width = 6,\r\n               if (input$cmp_fixed) {\r\n                 tagList(\r\n                   div(h5(textOutput(\"cmpTitle\"), style = \"font-size: 15px;\"),\r\n                       h6(textOutput(\"cmpModelTitle\"), style = \"font-style: italic; color: #666; font-size: 13px;\"),\r\n                       style = \"text-align: center;\"), \r\n                   plotlyOutput(\"comparePlot\", height = \"400px\")\r\n                 )\r\n               },\r\n               if (input$cmp_zero) {\r\n                 tagList(\r\n                   div(h5(textOutput(\"cmpTitleZero\")), style = \"text-align: center; margin-top: 50px; font-size: 20px;\"),\r\n                   div(style = \"width: 60%;\", plotlyOutput(\"compareZeroPlot\", height = \"300px\"))\r\n                 )\r\n               }\r\n        )\r\n      )\r\n    }\r\n  })\r\n\r\n  # Outputs\r\n  output$fixedPlot <- renderPlotly({ req(fixed_plot()); ggplotly(fixed_plot()) })\r\n  output$zeroPlot <- renderPlotly({ req(zero_plot()); ggplotly(zero_plot()) })\r\n  output$zeroPlotAlt <- renderPlotly({ req(zero_plot()); ggplotly(zero_plot()) })\r\n  output$modelPlot <- renderPlotly({ req(fixed_plot()); ggplotly(fixed_plot()) })\r\n  output$comparePlot <- renderPlotly({ req(compare_plot()); ggplotly(compare_plot()) })\r\n  output$compareZeroPlot <- renderPlotly({ req(compare_zero_plot()); ggplotly(compare_zero_plot()) })\r\n\r\n  # Downloads\r\n  output$downloadPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"model_fixed_plot_\", input$response, \"_\", input$model, \"_\", input$buffer, \".png\")\r\n    },\r\n    content = function(file) {\r\n      ggsave(file, plot = raw_fixed_plot(), device = \"png\", width = 8, height = 6, dpi = 1000)\r\n    }\r\n  )\r\n\r\n  output$downloadZeroPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"model_zero_plot_\", input$response, \"_\", input$model, \"_\", input$buffer, \".png\")\r\n    },\r\n    content = function(file) {\r\n      ggsave(file, plot = raw_zero_plot(), device = \"png\", width = 4, height = 3, dpi = 1000)\r\n    }\r\n  )\r\n\r\n\r\n  # 1. Dynamic filter updates\r\n  observe({\r\n    updatePickerInput(session, \"summary_country\", choices = sort(unique(HS_no_built_df$home_country)))\r\n    updatePickerInput(session, \"summary_age\", choices = unique(HS_no_built_df$age_group))\r\n    updatePickerInput(session, \"summary_gender\", choices = unique(HS_no_built_df$gender))\r\n    updatePickerInput(session, \"summary_urban_group\", choices = unique(HS_no_built_df$urban_group))\r\n    updatePickerInput(session, \"grouped_gender\", choices = unique(summary_combined_df$gender))\r\n    updatePickerInput(session, \"grouped_age\", choices = unique(summary_combined_df$age_group))\r\n    updatePickerInput(session, \"grouped_urban_group\", choices = unique(summary_combined_df$urban_group))\r\n\r\n\r\n  })\r\n\r\n  # 2. Reactive filtered dataset\r\n  filtered_summary_df <- reactive({\r\n    df <- HS_no_built_df\r\n    if (!is.null(input$summary_country)) df <- df[df$home_country %in% input$summary_country, ]\r\n    if (!is.null(input$summary_age)) df <- df[df$age_group %in% input$summary_age, ]\r\n    if (!is.null(input$summary_gender)) df <- df[df$gender %in% input$summary_gender, ]\r\n    #if (!is.null(input$summary_urban_label)) df <- df[df$urban_label %in% input$summary_urban_label, ]\r\n    if (!is.null(input$summary_urban_group)) df <- df[df$urban_group %in% input$summary_urban_group, ]\r\n    df\r\n  })\r\n\r\n  grouped_data <- reactive({\r\n    req(input$range_select)\r\n    df <- summary_combined_df %>% filter(buffer_range == input$range_select)\r\n    df <- df %>%\r\n      filter(\r\n        is.null(input$grouped_gender) | gender %in% input$grouped_gender,\r\n        is.null(input$grouped_age) | age_group %in% input$grouped_age,\r\n        #is.null(input$grouped_urban_label) | urban_label %in% input$grouped_urban_label,\r\n        is.null(input$grouped_urban_group) | urban_group %in% input$grouped_urban_group\r\n      )\r\n    df\r\n  })\r\n\r\n  # 3. Column selector based on buffer\r\n  get_col <- function(metric, type) {\r\n    switch(metric,\r\n      \"HS\" = paste0(\"HS_\", input$summary_buffer, \"_sum\"),\r\n      \"div\" = paste0(\"HD_\", input$summary_buffer, \"_use\")\r\n    )\r\n  }\r\n\r\n  # 4. Histogram plotting helper\r\n  make_histogram_plot <- function(metric, title, xlab) {\r\n    df <- filtered_summary_df()\r\n    col <- get_col(metric, \"hist\")\r\n    # if (metric == \"HS\") {\r\n    #   df <- df %>% mutate(log_x = ifelse(.data[[col]] == 0, 0, log10(.data[[col]])))\r\n    #   x_mapping <- \"log_x\"\r\n    # } else {\r\n    #   x_mapping <- col\r\n    # }\r\n    p <- ggplot(df, aes_string(x = col, fill = \"gender\", color = \"gender\")) +\r\n      geom_histogram(bins = 60, alpha = 0.4, position = \"identity\") +\r\n      scale_fill_manual(values = c(\"Male\" = \"#89bbe5\", \"Female\" = \"#fbb4ae\")) + \r\n      scale_color_manual(values = c(\"Male\" = \"#89bbe5\", \"Female\" = \"#fbb4ae\")) +\r\n      theme_classic() + labs(title = title, fill = \"Sex\", y = \"Count\", x = xlab, color = \"Sex\") +\r\n      scale_y_continuous(expand = expansion(mult = c(0, 0.05))) + \r\n      theme(axis.title.x = element_text(margin = margin(t = 10)), axis.title.y = element_text(margin = margin(r = 20)), plot.title = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))\r\n      if (metric == \"HS\") {\r\n      p <- p + scale_x_continuous(trans = pseudo_log_trans(base = 10, sigma = 0.05), breaks = c(0, 0.1, 1, 10),  labels = c(\"0\", \"0.1\", \"1\", \"10\"), expand = c(0, 0))\r\n      } else {\r\n      p <- p + scale_x_continuous(expand = c(0, 0))\r\n      }\r\n    return(p)\r\n  }\r\n  render_histogram <- function(metric, title, xlab) {\r\n    renderPlotly({\r\n      ggplotly(make_histogram_plot(metric, title, xlab))\r\n    })\r\n  }\r\n\r\n\r\n  output$hist_hs <- render_histogram(\"HS\", \"Habitat Selection\", \"HS\")\r\n  output$hist_div <- render_histogram(\"div\", \"Habitat Diversity\", \"H\")\r\n\r\n\r\n  # 7. Faceted\r\n  output$facet_hs_by_age_gender <- renderPlotly({\r\n    df <- filtered_summary_df()\r\n    hs_col <- get_col(\"HS\", \"facet\")\r\n    p <- ggplot(df, aes_string(x = hs_col)) +\r\n      geom_histogram(bins = 100) +\r\n      facet_grid(gender ~ age_group) +\r\n      theme_minimal() + labs(title = \"Habitat Selection by Age & Sex\") +\r\n      theme(axis.title.x = element_text(margin = margin(t = 10)), axis.title.y = element_text(margin = margin(r = 10)), plot.title = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))\r\n    ggplotly(p)\r\n  })\r\n\r\n  output$facet_div_by_region <- renderPlotly({\r\n    df <- filtered_summary_df()\r\n    hs_col <- get_col(\"HS\", \"facet\")\r\n    p <- ggplot(df, aes_string(x = hs_col, fill = \"gender\")) +\r\n      geom_histogram(position = \"stack\", bins = 100, alpha = 1, boundary = 0, color = \"#fffefe21\") +\r\n      scale_fill_manual(values = c(\"Male\" = \"#89bbe5\", \"Female\" = \"#fbb4ae\")) + \r\n      facet_wrap(~region) +\r\n      theme_minimal() + labs(title = \"Habitat Selection by Region\", fill = \"Sex\") +\r\n      theme(axis.text.x = element_text(size = 11), plot.title = element_text(hjust = 0.5, size = 12, margin = margin(b = 10)), axis.title.x = element_text(margin = margin(t = 10)), axis.title.y = element_text(margin = margin(r = 5)), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(), legend.position = \"right\")\r\n    ggplotly(p)\r\n  })\r\n\r\n    # 7. Grouped Nature Use\r\n  output$grouped_bar_plot <- renderPlotly({\r\n    df <- grouped_data()\r\n    req(nrow(df) > 0)\r\n\r\n    df <- df %>%\r\n      filter(type %in% c(\"Actual Use in Home Range\", \"Availability in Home Range\", \"Use Outside Home Range\"))\r\n    # Determine facet layout\r\n    n_facets <- length(input$facet_vars)\r\n\r\n    if (n_facets == 0) {\r\n      facet_layer <- NULL\r\n    } else if (n_facets == 1) {\r\n      facet_layer <- facet_wrap(as.formula(paste(\"~\", input$facet_vars[1])))\r\n    } else if (n_facets == 2) {\r\n      facet_layer <- facet_grid(as.formula(paste(input$facet_vars[1], \"~\", input$facet_vars[2])))\r\n    } else {\r\n      # Use facet_wrap with interaction for 3 variables\r\n      df$facet_combo <- interaction(df[input$facet_vars], drop = TRUE, sep = \" | \")\r\n      facet_layer <- facet_wrap(~facet_combo)\r\n    }\r\n\r\n    nature_labels <- c(\r\n      \"10\" = \"Tree cover\",\r\n      \"20\" = \"Shrubland\",\r\n      \"30\" = \"Grassland\",\r\n      \"40\" = \"Cropland\",\r\n      \"50\" = \"Built-up\",\r\n      \"60\" = \"Bare / sparse vegetation\",\r\n      \"70\" = \"Snow and ice\",\r\n      \"80\" = \"Water bodies\",\r\n      \"90\" = \"Herbaceous wetland\",\r\n      \"95\" = \"Mangroves\",\r\n      \"100\" = \"Moss and lichen\"\r\n    )\r\n    p <- ggplot(df, aes(x = factor(nature_class), y = mean_prop, fill = type)) +\r\n      geom_col(position = position_dodge(0.8), width = 0.7) +\r\n      scale_fill_manual(values = c(\"Actual Use in Home Range\" = \"#4C4CAD\",\r\n                                 \"Availability in Home Range\" = \"#C5E3ED\",\r\n                                 \"Use Outside Home Range\" = \"#A64CA6\")) +\r\n      labs(x = \"Nature Class\", y = \"Mean Proportion\",\r\n           title = paste(\"Nature Use and Avalability (\", input$range_select, \")\", sep = \"\"), fill = NULL) +\r\n      scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\r\n      scale_x_discrete(labels = nature_labels) +\r\n      theme_classic(base_size = 13) +\r\n      theme(strip.background = element_blank(), plot.title = element_text(hjust = 0.5, size = 14, margin = margin(b = 10)), axis.title.x = element_text(margin = margin(t = 30, b = 60)), axis.title.y = element_text(margin = margin(r = 5)), axis.text.x = element_text(angle = 45, size = 8, hjust=1, vjust = 0.9), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(), legend.position = \"top\", plot.margin = margin(b = 60, l = 20), panel.spacing.y = unit(15, \"mm\"), axis.ticks.x = element_line())\r\n    \r\n    if (!is.null(facet_layer)) {\r\n      p <- p + facet_layer\r\n    }\r\n    \r\n    ggplotly(p)\r\n  })\r\n \r\n  # 8. Downloads\r\n    # Downloads\r\n  output$download_hist_hs <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"histogram_HS_\", input$summary_buffer, \".png\")\r\n    },\r\n    content = function(file) {\r\n      ggsave(file, plot = make_histogram_plot(\"HS\", \"Habitat Selection\", \"HS\"), width = 8, height = 5)\r\n    }\r\n  )\r\n\r\n  output$download_hist_div <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"histogram_div_\", input$summary_buffer, \".png\")\r\n    },\r\n    content = function(file) {\r\n      ggsave(file, plot = make_histogram_plot(\"div\", \"Habitat Diversity\", \"H\"), width = 8, height = 5)\r\n    }\r\n  )\r\n\r\n  \r\n  # lapply(c(\"hist_hs\", \"hist_div\"), function(id) {\r\n  #   output[[paste0(\"download_\", id)]] <- downloadHandler(\r\n  #     filename = function() paste0(id, \".png\"),\r\n  #     content = function(file) {\r\n  #       g <- switch(id,\r\n  #         \"hist_hs\" = ggplot(filtered_summary_df(), aes_string(x = get_col(\"HS\", \"hist\"), fill = \"gender\")) + geom_histogram(),\r\n  #         \"hist_div\" = ggplot(filtered_summary_df(), aes_string(x = get_col(\"div\", \"hist\"), fill = \"gender\")) + geom_histogram()\r\n  #       )\r\n  #       ggsave(file, plot = g + theme_classic())\r\n  #     }\r\n  #   )\r\n  # })\r\n}\r\n\r\n\r\nshinyApp(ui, server)","type":"text"}]
